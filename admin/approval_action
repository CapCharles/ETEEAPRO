<?php
error_reporting(E_ALL);
ini_set('display_errors', 1);

session_start();
require_once '../config/database.php';
require_once '../config/constants.php';

// Set JSON header
header('Content-Type: application/json');

// Check if user is logged in and has approval rights
if (!isset($_SESSION['user_id']) || !in_array($_SESSION['user_type'], ['director_eteeap', 'ced', 'vpaa'])) {
    http_response_code(403);
    echo json_encode(['success' => false, 'message' => 'Unauthorized access. User type: ' . ($_SESSION['user_type'] ?? 'not set')]);
    exit();
}

$user_id = $_SESSION['user_id'];
$user_type = $_SESSION['user_type'];

// Validate POST request
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['success' => false, 'message' => 'Method not allowed']);
    exit();
}

$application_id = isset($_POST['application_id']) ? intval($_POST['application_id']) : 0;
$action = isset($_POST['action']) ? $_POST['action'] : '';
$remarks = isset($_POST['remarks']) ? trim($_POST['remarks']) : '';

// Validate inputs
if (!$application_id) {
    echo json_encode(['success' => false, 'message' => 'Missing application ID']);
    exit();
}

if (!in_array($action, ['approve', 'reject'])) {
    echo json_encode(['success' => false, 'message' => 'Invalid action: ' . $action]);
    exit();
}

try {
    // Start transaction
    $pdo->beginTransaction();
    
    // Get application details
    $stmt = $pdo->prepare("
        SELECT a.*, 
               CONCAT(u.first_name, ' ', u.last_name) as candidate_name,
               u.email as candidate_email,
               p.program_name, p.program_code
        FROM applications a
        LEFT JOIN users u ON a.user_id = u.id
        LEFT JOIN programs p ON a.program_id = p.id
        WHERE a.id = ?
    ");
    $stmt->execute([$application_id]);
    $application = $stmt->fetch(PDO::FETCH_ASSOC);
    
    if (!$application) {
        throw new Exception('Application not found (ID: ' . $application_id . ')');
    }
    
    // Check if required columns exist - this will help us know if migration was run
    $columns_to_check = ['director_eteeap_status', 'ced_status', 'vpaa_status', 'evaluator_submitted_at'];
    foreach ($columns_to_check as $col) {
        if (!array_key_exists($col, $application)) {
            throw new Exception('Database not updated! Missing column: ' . $col . '. Please run the SQL migration file first.');
        }
    }
    
    // CRITICAL: Only allow approval of QUALIFIED applications
    if ($action === 'approve' && !in_array($application['application_status'], ['qualified', 'under_review'])) {
        throw new Exception('Only QUALIFIED applications can be approved. Current status: ' . $application['application_status']);
    }
    
    // Determine approval level and validate
    $updates = [];
    $next_step = '';
    
    switch ($user_type) {
        case 'director_eteeap':
            // Check if already processed
            if ($application['director_eteeap_status'] !== 'pending') {
                throw new Exception('Already processed by Director ETEEAP. Status: ' . $application['director_eteeap_status']);
            }
            
            $updates = [
                'director_eteeap_status' => $action === 'approve' ? 'approved' : 'rejected',
                'director_eteeap_approved_by' => $user_id,
                'director_eteeap_approved_at' => 'NOW()',
                'director_eteeap_remarks' => $remarks
            ];
            
            $next_step = $action === 'approve' ? 'Application will now go to CED for review' : 'Application has been rejected';
            break;
            
        case 'ced':
            // Validate Director ETEEAP approved first
            if ($application['director_eteeap_status'] !== 'approved') {
                throw new Exception('Director ETEEAP must approve first. Current status: ' . $application['director_eteeap_status']);
            }
            
            if ($application['ced_status'] !== 'pending') {
                throw new Exception('Already processed by CED. Status: ' . $application['ced_status']);
            }
            
            $updates = [
                'ced_status' => $action === 'approve' ? 'approved' : 'rejected',
                'ced_approved_by' => $user_id,
                'ced_approved_at' => 'NOW()',
                'ced_remarks' => $remarks
            ];
            
            $next_step = $action === 'approve' ? 'Application will now go to VPAA for final review' : 'Application has been rejected';
            break;
            
        case 'vpaa':
            // Validate both approved
            if ($application['director_eteeap_status'] !== 'approved') {
                throw new Exception('Director ETEEAP must approve first');
            }
            
            if ($application['ced_status'] !== 'approved') {
                throw new Exception('CED must approve first');
            }
            
            if ($application['vpaa_status'] !== 'pending') {
                throw new Exception('Already processed by VPAA. Status: ' . $application['vpaa_status']);
            }
            
            $updates = [
                'vpaa_status' => $action === 'approve' ? 'approved' : 'rejected',
                'vpaa_approved_by' => $user_id,
                'vpaa_approved_at' => 'NOW()',
                'vpaa_remarks' => $remarks
            ];
            
            // Update final approval status
            if ($action === 'approve') {
                $updates['final_approval_status'] = 'fully_approved';
            }
            
            $next_step = $action === 'approve' ? 'Application has been FULLY APPROVED!' : 'Application has been rejected';
            break;
            
        default:
            throw new Exception('Invalid user type for approval: ' . $user_type);
    }
    
    // If rejected by anyone, update final status
    if ($action === 'reject') {
        $updates['final_approval_status'] = 'rejected';
    }
    
    // Build UPDATE query
    $set_clauses = [];
    $params = [];
    
    foreach ($updates as $column => $value) {
        if ($value === 'NOW()') {
            $set_clauses[] = "$column = NOW()";
        } else {
            $set_clauses[] = "$column = ?";
            $params[] = $value;
        }
    }
    
    $params[] = $application_id; // for WHERE clause
    
    $sql = "UPDATE applications SET " . implode(', ', $set_clauses) . " WHERE id = ?";
    
    $stmt = $pdo->prepare($sql);
    $stmt->execute($params);
    
    // Check if approval_logs table exists, if yes, log it
    try {
        $stmt = $pdo->prepare("
            INSERT INTO approval_logs 
            (application_id, approver_role, approver_id, action, remarks, previous_status, new_status)
            VALUES (?, ?, ?, ?, ?, 'pending', ?)
        ");
        $stmt->execute([
            $application_id,
            $user_type,
            $user_id,
            $action === 'approve' ? 'approved' : 'rejected',
            $remarks,
            $action === 'approve' ? 'approved' : 'rejected'
        ]);
    } catch (PDOException $e) {
        // approval_logs table doesn't exist, that's ok
        error_log("approval_logs table not found: " . $e->getMessage());
    }
    
    // Commit transaction
    $pdo->commit();
    
    // Return success response
    echo json_encode([
        'success' => true,
        'message' => ($action === 'approve' ? 'Application approved successfully!' : 'Application rejected successfully!'),
        'next_step' => $next_step,
        'action' => $action,
        'approver' => strtoupper(str_replace('_', ' ', $user_type))
    ]);
    
} catch (Exception $e) {
    // Rollback on error
    if ($pdo->inTransaction()) {
        $pdo->rollBack();
    }
    
    // Log the error
    error_log("Approval Error: " . $e->getMessage());
    error_log("User: " . $user_id . " (" . $user_type . ")");
    error_log("Application ID: " . $application_id);
    error_log("Action: " . $action);
    
    http_response_code(400);
    echo json_encode([
        'success' => false,
        'message' => $e->getMessage(),
        'debug_info' => [
            'user_type' => $user_type,
            'application_id' => $application_id,
            'action' => $action
        ]
    ]);
} catch (PDOException $e) {
    // Database error
    if ($pdo->inTransaction()) {
        $pdo->rollBack();
    }
    
    error_log("Database Error in approval_action.php: " . $e->getMessage());
    
    http_response_code(500);
    echo json_encode([
        'success' => false,
        'message' => 'Database error: ' . $e->getMessage(),
        'sql_error' => $e->getCode()
    ]);
}
?>