-- SQL to add approval workflow to existing u794351022_eteeap_db database

-- ===================================================
-- 1. ADD NEW USER ROLES
-- ===================================================
-- Modify users table to include new roles
ALTER TABLE `users` 
MODIFY COLUMN `user_type` ENUM(
    'candidate',
    'admin',
    'evaluator',
    'industry_partner',
    'director_eteeap',
    'ced',
    'vpaa',
    'president',
    'registrar'
) DEFAULT 'candidate';

-- ===================================================
-- 2. EXPAND APPLICATION STATUS OPTIONS  
-- ===================================================
ALTER TABLE `applications` 
MODIFY COLUMN `application_status` ENUM(
    'draft',
    'submitted',
    'under_review',
    'not_qualified',           -- 0-47%
    'partially_qualified',     -- 48-60%
    'awaiting_industry',       -- >= 61%, waiting for Industry Partner
    'awaiting_director',       -- Waiting for Director ETEEAP
    'awaiting_ced',            -- Waiting for CED
    'awaiting_vpaa',           -- Waiting for VPAA
    'awaiting_president',      -- Waiting for President
    'awaiting_registrar',      -- Waiting for Registrar
    'qualified',               -- Final - QUALIFIED
    'rejected'                 -- Rejected during approval chain
) DEFAULT 'draft';

-- ===================================================
-- 3. CREATE APPLICATION APPROVALS TABLE
-- ===================================================
CREATE TABLE IF NOT EXISTS `application_approvals` (
    `id` INT(11) NOT NULL AUTO_INCREMENT,
    `application_id` INT(11) NOT NULL,
    `approver_role` ENUM(
        'industry_partner',
        'director_eteeap',
        'ced',
        'vpaa',
        'president',
        'registrar'
    ) NOT NULL,
    `approver_id` INT(11) NOT NULL,
    `approver_name` VARCHAR(255) NOT NULL,
    `action` ENUM('approved', 'rejected') NOT NULL,
    `remarks` TEXT DEFAULT NULL,
    `approved_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (`id`),
    KEY `idx_app_approvals` (`application_id`),
    KEY `idx_approver` (`approver_id`),
    KEY `idx_approver_role` (`approver_role`),
    CONSTRAINT `fk_app_approvals_application` FOREIGN KEY (`application_id`) 
        REFERENCES `applications` (`id`) ON DELETE CASCADE,
    CONSTRAINT `fk_app_approvals_user` FOREIGN KEY (`approver_id`) 
        REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ===================================================
-- 4. ADD COLUMNS TO APPLICATIONS TABLE
-- ===================================================
ALTER TABLE `applications` 
ADD COLUMN IF NOT EXISTS `current_step` ENUM(
    'submission',
    'evaluation',
    'industry_partner',
    'director_eteeap',
    'ced',
    'vpaa',
    'president',
    'registrar',
    'completed'
) DEFAULT 'submission' AFTER `application_status`,
ADD COLUMN IF NOT EXISTS `can_reapply` TINYINT(1) DEFAULT 0 AFTER `current_step`,
ADD COLUMN IF NOT EXISTS `completed_at` TIMESTAMP NULL DEFAULT NULL AFTER `updated_at`;

-- ===================================================
-- 5. CREATE TRIGGER FOR AUTO STATUS UPDATE BASED ON SCORE
-- ===================================================
DELIMITER $$

DROP TRIGGER IF EXISTS `trg_applications_after_evaluation`$$

CREATE TRIGGER `trg_applications_after_evaluation` 
AFTER UPDATE ON `applications` 
FOR EACH ROW 
BEGIN
    -- Only trigger if evaluation was just completed (total_score changed from 0)
    IF NEW.total_score > 0 AND OLD.total_score = 0 THEN
        
        -- 0-47%: NOT QUALIFIED (can reapply)
        IF NEW.total_score < 48 THEN
            UPDATE applications 
            SET application_status = 'not_qualified',
                current_step = 'completed',
                can_reapply = 1,
                completed_at = NOW()
            WHERE id = NEW.id;
            
        -- 48-60%: PARTIALLY QUALIFIED (can reapply)
        ELSEIF NEW.total_score >= 48 AND NEW.total_score <= 60 THEN
            UPDATE applications 
            SET application_status = 'partially_qualified',
                current_step = 'completed',
                can_reapply = 1,
                completed_at = NOW()
            WHERE id = NEW.id;
            
        -- >= 61%: Proceed to Panel Approvals
        ELSE
            UPDATE applications 
            SET application_status = 'awaiting_industry',
                current_step = 'industry_partner',
                can_reapply = 0
            WHERE id = NEW.id;
        END IF;
        
    END IF;
END$$

DELIMITER ;

-- ===================================================
-- 6. UPDATE EXISTING APPLICATION STATUSES
-- ===================================================
-- For applications with scores that need status updates
UPDATE applications 
SET application_status = 'not_qualified',
    current_step = 'completed',
    can_reapply = 1
WHERE total_score > 0 AND total_score < 48 
AND application_status NOT IN ('not_qualified', 'partially_qualified', 'qualified', 'rejected');

UPDATE applications 
SET application_status = 'partially_qualified',
    current_step = 'completed',
    can_reapply = 1
WHERE total_score >= 48 AND total_score <= 60 
AND application_status NOT IN ('not_qualified', 'partially_qualified', 'qualified', 'rejected');

UPDATE applications 
SET application_status = 'awaiting_industry',
    current_step = 'industry_partner',
    can_reapply = 0
WHERE total_score > 60 
AND application_status NOT IN ('awaiting_industry', 'awaiting_director', 'awaiting_ced', 'awaiting_vpaa', 'awaiting_president', 'awaiting_registrar', 'qualified', 'rejected');

-- ===================================================
-- 7. CREATE VIEW FOR DIRECTOR DASHBOARD
-- ===================================================
CREATE OR REPLACE VIEW `v_director_applications` AS
SELECT 
    a.id,
    a.user_id,
    a.program_id,
    a.application_status,
    a.current_step,
    a.submission_date,
    a.evaluation_date,
    a.total_score,
    a.can_reapply,
    a.created_at,
    a.updated_at,
    u.first_name AS applicant_first_name,
    u.last_name AS applicant_last_name,
    u.email AS applicant_email,
    u.phone AS applicant_phone,
    p.program_name,
    CONCAT(u.first_name, ' ', u.last_name) AS applicant_name,
    (SELECT COUNT(*) FROM application_approvals aa 
     WHERE aa.application_id = a.id 
     AND aa.approver_role = 'director_eteeap' 
     AND aa.action = 'approved') AS director_approved,
    (SELECT COUNT(*) FROM application_approvals aa 
     WHERE aa.application_id = a.id 
     AND aa.approver_role = 'director_eteeap' 
     AND aa.action = 'rejected') AS director_rejected
FROM applications a
LEFT JOIN users u ON a.user_id = u.id
LEFT JOIN programs p ON a.program_id = p.id
WHERE a.application_status IN ('awaiting_director', 'awaiting_ced', 'awaiting_vpaa', 'awaiting_president', 'qualified', 'rejected')
OR a.current_step IN ('director_eteeap', 'ced', 'vpaa', 'president', 'registrar', 'completed');

-- ===================================================
-- 8. INSERT SAMPLE DIRECTOR USER (for testing)
-- ===================================================
-- Password is 'admin' - change this in production!
INSERT IGNORE INTO `users` (`email`, `password`, `first_name`, `last_name`, `user_type`, `status`) 
VALUES (
    'director@eteeap.edu.ph', 
    '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 
    'Director', 
    'ETEEAP', 
    'director_eteeap', 
    'active'
);

-- ===================================================
-- INSERT SAMPLE CED USER (for testing)
-- ===================================================
-- Password is 'admin' - change this in production!
INSERT IGNORE INTO `users` (`email`, `password`, `first_name`, `last_name`, `user_type`, `status`) 
VALUES (
    'ced@eteeap.edu.ph',
    '$2y$10$FAs.0dlt4uKCNC1cmHC75enHmifg8J2BWCEm4tlQPSN6jyU8P0kxO',
    'CED',
    'ETEEAP',
    'ced',
    'active'
);

-- ===================================================
-- INSERT SAMPLE VPAA USER (for testing)
-- ===================================================
-- Password is 'admin' - change this in production!
INSERT IGNORE INTO `users` (`email`, `password`, `first_name`, `last_name`, `user_type`, `status`) 
VALUES (
    'vpaa@eteeap.edu.ph',
    '$2y$10$FAs.0dlt4uKCNC1cmHC75enHmifg8J2BWCEm4tlQPSN6jyU8P0kxO',
    'VPAA',
    'ETEEAP',
    'vpaa',
    'active'
);

-- ===================================================
-- INSERT SAMPLE PRESIDENT USER (for testing)
-- ===================================================
-- Password is 'admin' - change this in production!
INSERT IGNORE INTO `users` (`email`, `password`, `first_name`, `last_name`, `user_type`, `status`) 
VALUES (
    'president@eteeap.edu.ph',
    '$2y$10$FAs.0dlt4uKCNC1cmHC75enHmifg8J2BWCEm4tlQPSN6jyU8P0kxO',
    'President',
    'ETEEAP',
    'president',
    'active'
);


-- ===================================================
-- COMPLETED! 
-- ===================================================
-- The database now supports:
-- 1. New user roles (industry_partner, director_eteeap, ced, vpaa, president, registrar)
-- 2. Expanded application statuses for approval workflow
-- 3. Application approvals tracking table
-- 4. Auto status updates based on evaluation scores
-- 5. Director dashboard view
-- 6. Sample director user account

-- ALTER TABLE applications 
-- ADD COLUMN evaluator_submitted_at DATETIME DEFAULT NULL,
-- ADD COLUMN director_eteeap_status ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',
-- ADD COLUMN director_eteeap_approved_by INT DEFAULT NULL,
-- ADD COLUMN director_eteeap_approved_at DATETIME DEFAULT NULL,
-- ADD COLUMN director_eteeap_remarks TEXT DEFAULT NULL,
-- ADD COLUMN ced_status ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',
-- ADD COLUMN ced_approved_by INT DEFAULT NULL,
-- ADD COLUMN ced_approved_at DATETIME DEFAULT NULL,
-- ADD COLUMN ced_remarks TEXT DEFAULT NULL,
-- ADD COLUMN vpaa_status ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',
-- ADD COLUMN vpaa_approved_by INT DEFAULT NULL,
-- ADD COLUMN vpaa_approved_at DATETIME DEFAULT NULL,
-- ADD COLUMN vpaa_remarks TEXT DEFAULT NULL,
-- ADD COLUMN final_approval_status ENUM('pending_approval', 'approved', 'rejected') DEFAULT 'pending_approval';



USE eteeap_db;

-- Add approval-related columns to applications table
ALTER TABLE applications 
-- Evaluator submission tracking
ADD COLUMN evaluator_submitted_at DATETIME DEFAULT NULL COMMENT 'When evaluator submitted the evaluation',

-- Director ETEEAP approval
ADD COLUMN director_eteeap_status ENUM('pending', 'approved', 'rejected') DEFAULT 'pending' COMMENT 'Director ETEEAP approval status',
ADD COLUMN director_eteeap_approved_by INT DEFAULT NULL COMMENT 'User ID who approved/rejected',
ADD COLUMN director_eteeap_approved_at DATETIME DEFAULT NULL COMMENT 'When Director ETEEAP made decision',
ADD COLUMN director_eteeap_remarks TEXT DEFAULT NULL COMMENT 'Director ETEEAP comments/remarks',

-- CED approval
ADD COLUMN ced_status ENUM('pending', 'approved', 'rejected') DEFAULT 'pending' COMMENT 'CED approval status',
ADD COLUMN ced_approved_by INT DEFAULT NULL COMMENT 'User ID who approved/rejected',
ADD COLUMN ced_approved_at DATETIME DEFAULT NULL COMMENT 'When CED made decision',
ADD COLUMN ced_remarks TEXT DEFAULT NULL COMMENT 'CED comments/remarks',

-- VPAA approval
ADD COLUMN vpaa_status ENUM('pending', 'approved', 'rejected') DEFAULT 'pending' COMMENT 'VPAA approval status',
ADD COLUMN vpaa_approved_by INT DEFAULT NULL COMMENT 'User ID who approved/rejected',
ADD COLUMN vpaa_approved_at DATETIME DEFAULT NULL COMMENT 'When VPAA made decision',
ADD COLUMN vpaa_remarks TEXT DEFAULT NULL COMMENT 'VPAA comments/remarks',

-- Overall approval status
ADD COLUMN final_approval_status ENUM('pending_approval', 'fully_approved', 'rejected') DEFAULT 'pending_approval' COMMENT 'Overall approval status after all approvers';

-- Add foreign key constraints
ALTER TABLE applications
ADD CONSTRAINT fk_director_approver FOREIGN KEY (director_eteeap_approved_by) REFERENCES users(id) ON DELETE SET NULL,
ADD CONSTRAINT fk_ced_approver FOREIGN KEY (ced_approved_by) REFERENCES users(id) ON DELETE SET NULL,
ADD CONSTRAINT fk_vpaa_approver FOREIGN KEY (vpaa_approved_by) REFERENCES users(id) ON DELETE SET NULL;

-- Add indexes for better query performance
CREATE INDEX idx_director_status ON applications(director_eteeap_status);
CREATE INDEX idx_ced_status ON applications(ced_status);
CREATE INDEX idx_vpaa_status ON applications(vpaa_status);
CREATE INDEX idx_final_approval ON applications(final_approval_status);
CREATE INDEX idx_evaluator_submitted ON applications(evaluator_submitted_at);

-- =====================================================
-- Create approval_logs table for audit trail
-- =====================================================
CREATE TABLE IF NOT EXISTS approval_logs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    application_id INT NOT NULL,
    approver_role ENUM('director_eteeap', 'ced', 'vpaa') NOT NULL,
    approver_id INT NOT NULL,
    action ENUM('approved', 'rejected', 'returned') NOT NULL,
    remarks TEXT DEFAULT NULL,
    previous_status VARCHAR(50) DEFAULT NULL,
    new_status VARCHAR(50) DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (application_id) REFERENCES applications(id) ON DELETE CASCADE,
    FOREIGN KEY (approver_id) REFERENCES users(id) ON DELETE CASCADE,
    INDEX idx_application (application_id),
    INDEX idx_approver (approver_id),
    INDEX idx_created (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='Audit trail for all approval actions';

-- =====================================================
-- Update existing applications to have default values
-- =====================================================
-- Set all existing evaluated applications to pending approval
UPDATE applications 
SET 
    director_eteeap_status = 'pending',
    ced_status = 'pending',
    vpaa_status = 'pending',
    final_approval_status = 'pending_approval'
WHERE application_status IN ('qualified', 'partially_qualified', 'not_qualified')
  AND evaluator_submitted_at IS NULL;

-- Set evaluator_submitted_at for existing evaluated applications
UPDATE applications 
SET evaluator_submitted_at = updated_at
WHERE application_status IN ('qualified', 'partially_qualified', 'not_qualified')
  AND evaluator_submitted_at IS NULL;

-- =====================================================
-- Create view for approval dashboard queries
-- =====================================================
CREATE OR REPLACE VIEW vw_approval_queue AS
SELECT 
    a.id,
    a.application_status,
    a.total_score,
    a.evaluator_submitted_at,
    
    -- Candidate info
    u.id as candidate_id,
    CONCAT(u.first_name, ' ', u.last_name) as candidate_name,
    u.email as candidate_email,
    
    -- Program info
    p.id as program_id,
    p.program_name,
    p.program_code,
    
    -- Evaluator info
    e.id as evaluator_id,
    CONCAT(e.first_name, ' ', e.last_name) as evaluator_name,
    
    -- Approval statuses
    a.director_eteeap_status,
    a.director_eteeap_approved_at,
    d.first_name as director_first_name,
    d.last_name as director_last_name,
    
    a.ced_status,
    a.ced_approved_at,
    c.first_name as ced_first_name,
    c.last_name as ced_last_name,
    
    a.vpaa_status,
    a.vpaa_approved_at,
    v.first_name as vpaa_first_name,
    v.last_name as vpaa_last_name,
    
    a.final_approval_status,
    a.created_at,
    a.updated_at
    
FROM applications a
LEFT JOIN users u ON a.user_id = u.id
LEFT JOIN programs p ON a.program_id = p.id
LEFT JOIN users e ON a.evaluator_id = e.id
LEFT JOIN users d ON a.director_eteeap_approved_by = d.id
LEFT JOIN users c ON a.ced_approved_by = c.id
LEFT JOIN users v ON a.vpaa_approved_by = v.id
WHERE a.evaluator_submitted_at IS NOT NULL;


// droppp
USE eteeap_db;

-- 1) Drop the view if it exists
DROP VIEW IF EXISTS vw_approval_queue;

-- 2) Drop approval_logs table if exists
DROP TABLE IF EXISTS approval_logs;

-- 3) Remove indexes (optional — DROP INDEX requires index exists)
DROP INDEX IF EXISTS idx_director_status ON applications;
DROP INDEX IF EXISTS idx_ced_status ON applications;
DROP INDEX IF EXISTS idx_vpaa_status ON applications;
DROP INDEX IF EXISTS idx_final_approval ON applications;
DROP INDEX IF EXISTS idx_evaluator_submitted ON applications;

-- 4) Remove foreign keys if they exist
-- Note: constraint names must match. If you used the exact names in migration, these will drop.
ALTER TABLE applications
  DROP FOREIGN KEY IF EXISTS fk_director_approver,
  DROP FOREIGN KEY IF EXISTS fk_ced_approver,
  DROP FOREIGN KEY IF EXISTS fk_vpaa_approver;

-- 5) Drop the added columns (IF EXISTS supported in MySQL 8+)
ALTER TABLE applications
  DROP COLUMN IF EXISTS evaluator_submitted_at,
  DROP COLUMN IF EXISTS director_eteeap_status,
  DROP COLUMN IF EXISTS director_eteeap_approved_by,
  DROP COLUMN IF EXISTS director_eteeap_approved_at,
  DROP COLUMN IF EXISTS director_eteeap_remarks,
  DROP COLUMN IF EXISTS ced_status,
  DROP COLUMN IF EXISTS ced_approved_by,
  DROP COLUMN IF EXISTS ced_approved_at,
  DROP COLUMN IF EXISTS ced_remarks,
  DROP COLUMN IF EXISTS vpaa_status,
  DROP COLUMN IF EXISTS vpaa_approved_by,
  DROP COLUMN IF EXISTS vpaa_approved_at,
  DROP COLUMN IF EXISTS vpaa_remarks,
  DROP COLUMN IF EXISTS final_approval_status;



-- ===================================================
-- ROLLBACK SCRIPT: NEW 3-Level → OLD 6-Level Workflow
-- ===================================================
-- ⚠️ WARNING: This will DROP new columns and their data!
-- Make sure to backup your database first!
-- ===================================================

-- ===================================================
-- STEP 1: BACKUP CHECK (Run this first!)
-- ===================================================
-- Check if there's any data in the new workflow columns
SELECT 
    COUNT(*) as total_apps,
    SUM(CASE WHEN director_eteeap_status != 'pending' THEN 1 ELSE 0 END) as director_processed,
    SUM(CASE WHEN ced_status != 'pending' THEN 1 ELSE 0 END) as ced_processed,
    SUM(CASE WHEN vpaa_status != 'pending' THEN 1 ELSE 0 END) as vpaa_processed,
    SUM(CASE WHEN final_approval_status = 'fully_approved' THEN 1 ELSE 0 END) as fully_approved
FROM applications 
WHERE evaluator_submitted_at IS NOT NULL;

-- ⚠️ If any of these numbers are > 0, you have data that will be LOST!
-- Consider backing up first:
-- mysqldump -u your_user -p eteeap_db > backup_before_rollback.sql

-- ===================================================
-- STEP 2: DROP NEW 3-LEVEL WORKFLOW COLUMNS
-- ===================================================

-- Drop approval workflow columns
ALTER TABLE `applications` 
DROP COLUMN IF EXISTS `evaluator_submitted_at`,
DROP COLUMN IF EXISTS `director_eteeap_status`,
DROP COLUMN IF EXISTS `director_eteeap_approved_by`,
DROP COLUMN IF EXISTS `director_eteeap_approved_at`,
DROP COLUMN IF EXISTS `director_eteeap_remarks`,
DROP COLUMN IF EXISTS `ced_status`,
DROP COLUMN IF EXISTS `ced_approved_by`,
DROP COLUMN IF EXISTS `ced_approved_at`,
DROP COLUMN IF EXISTS `ced_remarks`,
DROP COLUMN IF EXISTS `vpaa_status`,
DROP COLUMN IF EXISTS `vpaa_approved_by`,
DROP COLUMN IF EXISTS `vpaa_approved_at`,
DROP COLUMN IF EXISTS `vpaa_remarks`,
DROP COLUMN IF EXISTS `final_approval_status`;

-- Drop approval logs table
DROP TABLE IF EXISTS `approval_logs`;

-- Drop the view
DROP VIEW IF EXISTS `v_approval_workflow`;

-- ===================================================
-- STEP 3: ADD OLD 6-LEVEL WORKFLOW STRUCTURE
-- ===================================================

-- 3.1: Expand user types to include Industry Partner, President, Registrar
ALTER TABLE `users` 
MODIFY COLUMN `user_type` ENUM(
    'candidate',
    'admin',
    'evaluator',
    'industry_partner',
    'director_eteeap',
    'ced',
    'vpaa',
    'president',
    'registrar'
) DEFAULT 'candidate';

-- 3.2: Expand application status options
ALTER TABLE `applications` 
MODIFY COLUMN `application_status` ENUM(
    'draft',
    'submitted',
    'under_review',
    'not_qualified',           -- 0-47%
    'partially_qualified',     -- 48-60%
    'awaiting_industry',       -- >= 61%, waiting for Industry Partner
    'awaiting_director',       -- Waiting for Director ETEEAP
    'awaiting_ced',            -- Waiting for CED
    'awaiting_vpaa',           -- Waiting for VPAA
    'awaiting_president',      -- Waiting for President
    'awaiting_registrar',      -- Waiting for Registrar
    'qualified',               -- Final - QUALIFIED
    'rejected'                 -- Rejected during approval chain
) DEFAULT 'draft';

-- 3.3: Create application approvals table
CREATE TABLE IF NOT EXISTS `application_approvals` (
    `id` INT(11) NOT NULL AUTO_INCREMENT,
    `application_id` INT(11) NOT NULL,
    `approver_role` ENUM(
        'industry_partner',
        'director_eteeap',
        'ced',
        'vpaa',
        'president',
        'registrar'
    ) NOT NULL,
    `approver_id` INT(11) NOT NULL,
    `approver_name` VARCHAR(255) NOT NULL,
    `action` ENUM('approved', 'rejected') NOT NULL,
    `remarks` TEXT DEFAULT NULL,
    `approved_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (`id`),
    KEY `idx_app_approvals` (`application_id`),
    KEY `idx_approver` (`approver_id`),
    KEY `idx_approver_role` (`approver_role`),
    CONSTRAINT `fk_app_approvals_application` FOREIGN KEY (`application_id`) 
        REFERENCES `applications` (`id`) ON DELETE CASCADE,
    CONSTRAINT `fk_app_approvals_user` FOREIGN KEY (`approver_id`) 
        REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- 3.4: Add workflow tracking columns
ALTER TABLE `applications` 
ADD COLUMN IF NOT EXISTS `current_step` ENUM(
    'submission',
    'evaluation',
    'industry_partner',
    'director_eteeap',
    'ced',
    'vpaa',
    'president',
    'registrar',
    'completed'
) DEFAULT 'submission' AFTER `application_status`,
ADD COLUMN IF NOT EXISTS `can_reapply` TINYINT(1) DEFAULT 0 AFTER `current_step`,
ADD COLUMN IF NOT EXISTS `completed_at` TIMESTAMP NULL DEFAULT NULL AFTER `updated_at`;

-- ===================================================
-- STEP 4: CREATE TRIGGER FOR AUTO STATUS BASED ON SCORE
-- ===================================================
DELIMITER $$

DROP TRIGGER IF EXISTS `trg_applications_after_evaluation`$$

CREATE TRIGGER `trg_applications_after_evaluation` 
AFTER UPDATE ON `applications` 
FOR EACH ROW 
BEGIN
    -- Only trigger if evaluation was just completed (total_score changed from 0)
    IF NEW.total_score > 0 AND OLD.total_score = 0 THEN
        
        -- 0-47%: NOT QUALIFIED (can reapply)
        IF NEW.total_score < 48 THEN
            UPDATE applications 
            SET application_status = 'not_qualified',
                current_step = 'completed',
                can_reapply = 1,
                completed_at = NOW()
            WHERE id = NEW.id;
            
        -- 48-60%: PARTIALLY QUALIFIED (can reapply)
        ELSEIF NEW.total_score >= 48 AND NEW.total_score <= 60 THEN
            UPDATE applications 
            SET application_status = 'partially_qualified',
                current_step = 'completed',
                can_reapply = 1,
                completed_at = NOW()
            WHERE id = NEW.id;
            
        -- >= 61%: Proceed to 6-Level Approval (starts with Industry Partner)
        ELSE
            UPDATE applications 
            SET application_status = 'awaiting_industry',
                current_step = 'industry_partner',
                can_reapply = 0
            WHERE id = NEW.id;
        END IF;
        
    END IF;
END$$

DELIMITER ;

-- ===================================================
-- STEP 5: UPDATE EXISTING APPLICATIONS
-- ===================================================

-- For applications with scores that need status updates
UPDATE applications 
SET application_status = 'not_qualified',
    current_step = 'completed',
    can_reapply = 1,
    completed_at = NOW()
WHERE total_score > 0 AND total_score < 48 
AND application_status NOT IN ('not_qualified', 'partially_qualified', 'qualified', 'rejected');

UPDATE applications 
SET application_status = 'partially_qualified',
    current_step = 'completed',
    can_reapply = 1,
    completed_at = NOW()
WHERE total_score >= 48 AND total_score <= 60 
AND application_status NOT IN ('not_qualified', 'partially_qualified', 'qualified', 'rejected');

-- Applications with score >= 61% should go to industry partner
UPDATE applications 
SET application_status = 'awaiting_industry',
    current_step = 'industry_partner',
    can_reapply = 0
WHERE total_score > 60 
AND application_status NOT IN ('awaiting_industry', 'awaiting_director', 'awaiting_ced', 'awaiting_vpaa', 'awaiting_president', 'awaiting_registrar', 'qualified', 'rejected');

-- ===================================================
-- STEP 6: CREATE VIEW FOR DASHBOARDS
-- ===================================================
CREATE OR REPLACE VIEW `v_director_applications` AS
SELECT 
    a.id,
    a.user_id,
    a.program_id,
    a.application_status,
    a.current_step,
    a.submission_date,
    a.evaluation_date,
    a.total_score,
    a.can_reapply,
    a.created_at,
    a.updated_at,
    u.first_name AS applicant_first_name,
    u.last_name AS applicant_last_name,
    u.email AS applicant_email,
    u.phone AS applicant_phone,
    p.program_name,
    CONCAT(u.first_name, ' ', u.last_name) AS applicant_name,
    (SELECT COUNT(*) FROM application_approvals aa 
     WHERE aa.application_id = a.id 
     AND aa.approver_role = 'director_eteeap' 
     AND aa.action = 'approved') AS director_approved,
    (SELECT COUNT(*) FROM application_approvals aa 
     WHERE aa.application_id = a.id 
     AND aa.approver_role = 'director_eteeap' 
     AND aa.action = 'rejected') AS director_rejected
FROM applications a
LEFT JOIN users u ON a.user_id = u.id
LEFT JOIN programs p ON a.program_id = p.id
WHERE a.application_status IN ('awaiting_director', 'awaiting_ced', 'awaiting_vpaa', 'awaiting_president', 'qualified', 'rejected')
OR a.current_step IN ('director_eteeap', 'ced', 'vpaa', 'president', 'registrar', 'completed');

-- ===================================================
-- ROLLBACK COMPLETE! ✅
-- ===================================================
-- What you need to do next:
-- 
-- 1. PHP FILES TO CREATE:
--    - industry_partner.php (1st approval)
--    - president.php (5th approval)
--    - registrar.php (6th approval)
--    - approval_handler.php (handles sequential approvals)
--
-- 2. PHP FILES TO MODIFY:
--    - director_eteeap.php (change to 2nd approval, after industry)
--    - ced.php (change to 3rd approval)
--    - vpaa.php (change to 4th approval, NOT final)
--    - evaluate.php (remove workflow trigger, let trigger handle it)
--    - login.php (add industry_partner, president, registrar routing)
--
-- 3. REMOVE FILES:
--    - approval_action.php (replace with approval_handler.php)
--
-- ===================================================

SELECT 'ROLLBACK TO OLD 6-LEVEL WORKFLOW COMPLETE!' as Status;

//DELETE

-- 1. Check for users
SELECT user_type, COUNT(*) FROM users 
WHERE user_type IN ('industry_partner', 'director_eteeap', 'ced', 'vpaa', 'president')
GROUP BY user_type;

-- 2. Convert users (if any)
UPDATE users SET user_type = 'admin' 
WHERE user_type IN ('industry_partner', 'director_eteeap', 'ced', 'vpaa', 'president');

-- 3. Remove user types
ALTER TABLE users 
MODIFY COLUMN user_type ENUM('candidate','admin','evaluator') DEFAULT 'candidate';

-- 4. Verify
SHOW COLUMNS FROM users LIKE 'user_type';



-- Step 1: Drop the trigger if exists
DROP TRIGGER IF EXISTS `trg_applications_after_evaluation`;

-- Step 2: Drop the application_approvals table
DROP TABLE IF EXISTS `application_approvals`;

-- Step 3: Update any new statuses to map back to original statuses
-- Map the approval workflow statuses back to original statuses
UPDATE `applications` 
SET `application_status` = 'under_review' 
WHERE `application_status` IN ('awaiting_industry', 'awaiting_director', 'awaiting_ced', 'awaiting_vpaa', 'awaiting_president', 'awaiting_registrar');

UPDATE `applications` 
SET `application_status` = 'not_qualified' 
WHERE `application_status` = 'rejected';

-- Step 4: Modify the applications table to use original ENUM values
ALTER TABLE `applications` 
MODIFY COLUMN `application_status` ENUM(
    'draft',
    'submitted',
    'under_review',
    'qualified',
    'partially_qualified',
    'not_qualified'
) DEFAULT 'draft';

-- Step 5: Optional - Reset current_step for affected records
UPDATE `applications` 
SET `current_step` = 'submission' 
WHERE `current_step` IN ('industry_partner', 'director_eteeap', 'ced', 'vpaa', 'president', 'registrar', 'completed');